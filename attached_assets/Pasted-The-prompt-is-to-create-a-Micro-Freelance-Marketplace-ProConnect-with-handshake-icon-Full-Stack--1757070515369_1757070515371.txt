The prompt is to create a Micro Freelance Marketplace (ProConnect with handshake icon) - Full Stack Assessment
Project Overview
Build a comprehensive micro freelance marketplace platform that connects clients with freelancers for project-based work. The platform should facilitate task posting, bidding, milestone tracking, payments, and communication between parties.

1. Functional Requirements
1.1 Authentication & User Management
Core Features:
User registration/login/logout with email and password, Email verification for new accounts using OTP, Password reset functionality, Profile management (avatar, bio, skills, portfolio links)

User Roles & Permissions:
Freelancer Role: can browse and search available tasks, submit bids with proposals and pricing, Update milestone progress, Manage personal profile and portfolio
Client Role: can post new tasks/projects, review and select freelancer bids, create and manage milestones, approve completed work and release payments
Admin Role: user management (view, suspend, delete accounts), task moderation and content management, System analytics and reporting, manage payment & dispute resolution
Note: use a single dashboard but hide some components depending on the logged in user

1.2 Task Management System
Task/Project Creation: create a form with a text editor for detailed task descriptions, category selection (Web Development, Design, Writing, Marketing, etc.), budget range specification (fixed price or hourly rate), deadline setting with calendar integration, file attachment support for requirements, task status tracking (Open, In Progress, Completed, Cancelled)

Bidding System:
Freelancers submit detailed proposals with cover letter explaining approach, proposed timeline and milestones, portfolio examples relevant to task, questions for client clarification(optional), bid comparison interface for clients, automatic bid notifications

1.3 Milestone & Progress Management
Break tasks into measurable milestones with each milestone including description and deliverables, the due date and payment amount, file submission capability, status tracking (Pending, In Review, Approved), progress visualization with completion percentage, revision request system with feedback comments

1.4 Communication System
Real-time Messaging: each posted task should have a button to open a chat window between the client and the freelancer to discuss about the project/task, should allow file sharing within the chatrooms, message history and search functionality using keywords, online status indicators (orange buttons to indicate activity), read receipts (seen, delivered, ...)

Notification System: the users should receive emails for critical notifications like payments or bid apporvals, the app should have its own notification center

Payment Processing: integrate stripe for payment services, allow multiple payment methods (cards, bank transfer, digital wallets, ...), after every milestone completion has been approved by the client the payment should be done immediately and sent to the freelancer, keep track of payment invoices and history

Financial Features: display the freelancers average earnings on their dashboard, display the average clients' spendings on their dashboard

1.6 Search & Discovery
Allow advanced task filtering depending on category, budget, deadline and location, search for freelancers filtering by skills, save recent searches to autofill the searchbar when the user tries searching for previous info, add job or freelancer recommendations based on past work or the users' past activities. 

2. Non-Functional Requirements
2.1 Performance Requirements
Response Time: Page load times under 2 seconds
Concurrent Users: Support minimum 1,000 simultaneous users
Database Performance: Query response times under 100ms
File Upload: Support files up to 50MB with progress indicators
Real-time Features: Message delivery within 1 second

2.2 Security Requirements
Authentication: JWT-based session management with refresh tokens
Password Security: Bcrypt hashing with salt rounds â‰¥ 12
Data Protection: HTTPS enforcement and CORS configuration
Input Validation: Server-side validation for all user inputs
Rate Limiting: API rate limiting to prevent abuse
File Security: Virus scanning for uploaded files

2.3 Scalability Requirements
Architecture: Microservices-ready modular design
Database: Optimized queries with proper indexing
Caching: Redis implementation for session and frequently accessed data
CDN Integration: Asset delivery optimization
Load Balancing: Horizontal scaling capability

2.4 Reliability & Availability
Uptime: 99.9% availability target
Error Handling: Graceful error recovery and user feedback
Data Backup: Automated daily database backups
Monitoring: Application performance monitoring and alerting
Failover: Database replication for disaster recovery

2.5 Usability Requirements
Responsive Design: Mobile-first approach supporting all screen sizes
Accessibility: WCAG 2.1 AA compliance
Browser Support: Chrome, Firefox, Safari, Edge (latest 2 versions)
User Experience: Intuitive navigation with maximum 3 clicks to any feature
Loading States: Skeleton screens and progress indicators

3. Technical Architecture
3.1 Frontend Stack
Required Technologies:
Framework: React.js with TypeScript
State Management: Redux Toolkit
Styling: Tailwind CSS (both light mode #fafafa and dark mode #191919, the primary color should be orange #f97316, all the other shades should be derived from these ones, in dark mode you tend to add bluish tones of gray, don't use them use shades derived from the given primary color for dark mode)
Real-time: Socket.io client
Form Handling: React Hook Form
HTTP Client: Axios with interceptors

3.2 Backend Stack
Required Technologies:
Runtime: Node.js with Express.js
Database: MongoDB with Mongoose
Authentication: JWT with refresh token rotation
Real-time: Socket.io server
File Storage: Cloudinary
Payment: Stripe SDK integration